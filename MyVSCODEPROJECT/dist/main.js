/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/***/ (() => {

eval("Vue.component('alert-box', {\r\n    template: `\r\n    <div class=\"alert\" v-on:click=\"caution\">\r\n        <strong>Error!</strong>\r\n        <slot></slot>\r\n    </div>\r\n    `,\r\n    methods: {\r\n        caution: function(e){\r\n            alert('クリックされました');\r\n        }\r\n    }\r\n});\r\nvar app = new Vue({\r\n    el: '#app',\r\n    data:{\r\n        errorflgs: false,\r\n        product: '演習1',\r\n        product2: '演習２',\r\n        message: 'Hello',\r\n        error_class: \"error2\",\r\n        now: \"00:00:00\",\r\n        now_comp: \"01:01:01\",\r\n        prefs: [\r\n            { name: '北海道'},\r\n            { name: '福岡県'},\r\n            { name: '山口県'},\r\n            { name: '熊本県'},\r\n            { name: '大分県'},\r\n            { name: '佐賀県'}\r\n        ],\r\n        price: \"\",\r\n        yen500: 0,\r\n        yen100: 0,\r\n        yen50: 0,\r\n        yen10: 0,\r\n        yen5: 0,\r\n        yen1: 0,\r\n        inputdata: \"Result\\tJSON\\t\\n\\tsubject\\t文字列\\t件名\\n\\tObjectList\\tJSON\\n\\t\\tname\\t文字列\\t名前\\n\\t\\tnum\\t数値\\t9\\n\\t\\tfruitList\\tリスト\\tりんご\\tバナナ\\tみかん\\n\\ttotalprice\\t数値\\t1200\",\r\n        outdata: \"\"\r\n    },\r\n    methods: {\r\n        check: function(e){\r\n            try {\r\n                JSON.parse(this.outdata);\r\n                check=true;\r\n            } catch (e) {\r\n                alert(\"データ不正です。おそらく、末尾の「}」が足りていないか、最後のデータに「,」が余分にあります。\");                \r\n            }\r\n        },\r\n        conv: function(e){\r\n            var lines = this.inputdata.split('\\n');\r\n            let out = \"\";\r\n            let type = 0;\r\n            let level = 0;\r\n            let before_level = -1;\r\n            for ( let i = 0; i < lines.length; i++ ) {\r\n                let offset = true;\r\n                let items = lines[i].split('\\t');\r\n                let key = \"\";\r\n                let lineflg = false;\r\n                for ( let  j= 0; j < items.length; j++ ) {\r\n                    if(offset == true && items[j] == \"\"){\r\n                        level = j+1;\r\n                    }else{\r\n                        offset = false;\r\n                    }\r\n                    if(items[j] != \"\"){\r\n                        if(level==before_level){\r\n\r\n                        }else if(level > before_level){\r\n                            out += \"{\";\r\n                        }else{\r\n                            let start = out.substring(0,out.lastIndexOf('\\n')-1);\r\n                            let end = out.slice(out.lastIndexOf('\\n'),out.length);\r\n                            out = start + end + \"},\";\r\n                        }\r\n                        before_level = level;\r\n                        if(j==level+1){\r\n                            switch (items[j]){\r\n                                case 'JSON':\r\n                                    type = items[j];\r\n                                    out = out + \"\\\"\" + key + \"\\\": \";\r\n                                    lineflg = true;\r\n                                    break;\r\n                                case '文字列':\r\n                                    type = items[j];\r\n                                    break;\r\n                                case '数値':\r\n                                    type = items[j];\r\n                                    break;\r\n                                case 'リスト':\r\n                                    type = items[j];\r\n                                    break;\r\n                            }\r\n                            continue;\r\n                        }else if( j==level ){\r\n                            key = items[j];\r\n                            continue;\r\n                        }else if(j>level){\r\n                            if(type == \"JSON\"){\r\n                                out = out + \"\\\"\" + key + \"\\\": \\\"\" + items[j] + \"\\\"\";\r\n                            }else if(type == \"文字列\"){\r\n                                out = out + \"\\\"\" + key + \"\\\": \\\"\" + items[j] + \"\\\"\";\r\n                            }else if(type == \"数値\"){\r\n                                out = out + \"\\\"\" + key + \"\\\": \" + items[j] + \"\";\r\n                            }else if(type == \"リスト\"){\r\n                                let val = \"\";\r\n                                for ( let  k= j; k < items.length; k++ ) {\r\n                                    val = val + \"{\\\"\" + key + \"\\\" : \" + \"\\\"\" + items[k] + \"\\\"}\";\r\n                                    if(k+1 < items.length){\r\n                                        val += \",\";\r\n                                    }\r\n                                }\r\n                                out = out + \"\\\"\" + key + \"\\\": [\" + val + \"]\";\r\n                            }                                \r\n                            break;\r\n                        }\r\n                    }else{\r\n                        out += \"\\t\";\r\n                    }\r\n                }\r\n                if( lineflg == false && i + 1 != lines.length){\r\n                    out += \",\";\r\n                }else if(i + 1 == lines.length){\r\n                    out += \"}\";\r\n                }\r\n                out += \"\\n\";\r\n            }\r\n            out += \"}\";\r\n            this.outdata = out;\r\n        },\r\n        calc: function(e){\r\n            change = this.price;\r\n            this.yen500 = Math.floor(change/500);\r\n            change %= 500;\r\n            this.yen100 = Math.floor(change/100);\r\n            change %= 100;\r\n            this.yen50 = Math.floor(change/50);\r\n            change %= 50;\r\n            this.yen10 = Math.floor(change/10);\r\n            change %= 10;\r\n            this.yen5 = Math.floor(change/5);\r\n            this.yen1 = change % 5;\r\n        },\r\n        time: function(e){\r\n            var date = new Date();\r\n            this.now = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\r\n        },\r\n        shuffle: function(e){\r\n            this.prefs = _.shuffle(this.prefs);\r\n        }\r\n    },\r\n    computed: {\r\n        time2: function(e){\r\n            this.now_comp = this.now;\r\n        },\r\n        reversedMessage: function(){\r\n            return this.message.split('').reverse().join('');\r\n        }\r\n    }\r\n});\r\nlet elem = document.getElementById(\"ele2\").innerText;\r\nlet task1 = \"データの取得とDOM操作\"\r\nlet task2 = \"JSONで取得したデータをパースする\"\r\n\r\n// const h3 = document.querySelector('h3');\r\n\r\n// h3.addEventListener('click', () => {\r\n//     h3.textContent = 'Changed!';\r\n// });\r\n\n\n//# sourceURL=webpack://myvscodeproject/./src/js/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/index.js"]();
/******/ 	
/******/ })()
;